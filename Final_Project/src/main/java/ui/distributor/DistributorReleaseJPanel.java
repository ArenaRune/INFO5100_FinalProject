/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.distributor;

import db4outil.DB4OUtil;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.EcoSystem;
import model.enterprise.Enterprise;
import model.enterprise.TheaterChain;
import model.movie.Movie;
import model.network.Network;
import model.role.DistributorRole;
import model.theater.Theater;
import model.useraccount.UserAccount;

/**
 *
 * @author navyaravuri
 */
public class DistributorReleaseJPanel extends javax.swing.JPanel {
    JPanel userProcessContainer;
    Network network;
    UserAccount ua;
    DistributorRole dr;
    EcoSystem system;
    ArrayList<TheaterChain> theaterChains;
    ArrayList<Theater> selectedList;
    HashMap<Theater, Double> priceList;
    /**
     * Creates new form DistributorHistoryJPanel
     */
    public DistributorReleaseJPanel(JPanel userProcessContainer, EcoSystem system, Network network, UserAccount ua) {
        initComponents();
        
        this.system = system;
        this.userProcessContainer = userProcessContainer;
        this.network = network;
        this.ua = ua;
        theaterChains = new ArrayList<TheaterChain>();
        dr = (DistributorRole) ua.getRole();
        selectedList = new ArrayList<Theater>();
        priceList = new HashMap<Theater, Double>();

        for(Enterprise e: network.getEnterpriseDirectory().getEnterpriseList()) {
            if(e.getEnterpriseType().equals(Enterprise.EnterpriseType.TheaterChain)) theaterChains.add((TheaterChain) e);
        }    
        
        populateMovieCombo();
        populateTheaterChainCombo();
        populateTheaterTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTheaters = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        cmbTheaterChain = new javax.swing.JComboBox();
        cmbMovies = new javax.swing.JComboBox();
        btnRelease = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblSelectedTheaters = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        txtPrice = new javax.swing.JTextField();
        lblTicketPirce = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 51, 51));
        jLabel1.setText("Distributor History");

        tblTheaters.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "Theater Name", "Screen Count"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblTheaters);
        if (tblTheaters.getColumnModel().getColumnCount() > 0) {
            tblTheaters.getColumnModel().getColumn(0).setResizable(false);
            tblTheaters.getColumnModel().getColumn(1).setResizable(false);
        }

        btnBack.setBackground(new java.awt.Color(204, 204, 255));
        btnBack.setText("<<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        cmbTheaterChain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTheaterChainActionPerformed(evt);
            }
        });

        cmbMovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMoviesActionPerformed(evt);
            }
        });

        btnRelease.setBackground(new java.awt.Color(136, 197, 197));
        btnRelease.setText("Release");
        btnRelease.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReleaseActionPerformed(evt);
            }
        });

        tblSelectedTheaters.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Theater Name", "Ticket Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblSelectedTheaters);
        if (tblSelectedTheaters.getColumnModel().getColumnCount() > 0) {
            tblSelectedTheaters.getColumnModel().getColumn(0).setResizable(false);
            tblSelectedTheaters.getColumnModel().getColumn(1).setResizable(false);
        }

        btnAdd.setBackground(new java.awt.Color(136, 197, 197));
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnRemove.setBackground(new java.awt.Color(136, 197, 197));
        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        lblTicketPirce.setText("Ticket Price");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(btnBack)
                        .addGap(185, 185, 185)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(125, 125, 125)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 581, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(cmbMovies, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(cmbTheaterChain, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblTicketPirce)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAdd))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnRemove)
                                .addGap(426, 426, 426)
                                .addComponent(btnRelease))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 581, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(94, 94, 94))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbMovies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbTheaterChain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTicketPirce))
                .addGap(24, 24, 24)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRelease)
                    .addComponent(btnRemove))
                .addGap(88, 88, 88))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cmbTheaterChainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTheaterChainActionPerformed
        // TODO add your handling code here:
        populateTheaterTable();
    }//GEN-LAST:event_cmbTheaterChainActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblTheaters.getSelectedRow();
        if (selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select the Theater first.");
            return;
        }
        double ticketPrice;
        try{
            ticketPrice = Double.parseDouble(txtPrice.getText());
            if (!(ticketPrice > 0)) {
                JOptionPane.showMessageDialog(this, "Enter a valid Ticket Price.", "Warning", JOptionPane.ERROR_MESSAGE);
                return;
            } 
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Enter a valid Ticket Price.", "Warning", JOptionPane.ERROR_MESSAGE);
            return;
        }
        Theater t = (Theater) tblTheaters.getValueAt(selectedRowIndex, 0);
        selectedList.add(t);
        priceList.put(t, ticketPrice);
        populateTheaterTable();
        populateCartTable();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblTheaters.getSelectedRow();
        if (selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select the Theater first.");
            return;
        }
        Theater t = (Theater) tblSelectedTheaters.getValueAt(selectedRowIndex, 0);
        selectedList.remove(t);
        priceList.remove(t);
        populateTheaterTable();
        populateCartTable();
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnReleaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReleaseActionPerformed
        // TODO add your handling code here:
        for(Theater t : selectedList) {
            if(t.getMovieList().contains((Movie) cmbMovies.getSelectedItem())) continue;
            t.getPriceList().put((Movie) cmbMovies.getSelectedItem(), priceList.get(t));
            t.getMovieList().add((Movie) cmbMovies.getSelectedItem());
            t.getRevenueList().put((Movie) cmbMovies.getSelectedItem(), (0.0));
            t.getTicketsSold().put((Movie) cmbMovies.getSelectedItem(), 0);
        }
        
        selectedList.clear();
        populateTheaterTable();
        populateCartTable();
        JOptionPane.showMessageDialog(this, "The Movie has been released in selected theaters.");
        DB4OUtil.getInstance().storeSystem(system);
    }//GEN-LAST:event_btnReleaseActionPerformed

    private void cmbMoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMoviesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbMoviesActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnRelease;
    private javax.swing.JButton btnRemove;
    private javax.swing.JComboBox cmbMovies;
    private javax.swing.JComboBox cmbTheaterChain;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblTicketPirce;
    private javax.swing.JTable tblSelectedTheaters;
    private javax.swing.JTable tblTheaters;
    private javax.swing.JTextField txtPrice;
    // End of variables declaration//GEN-END:variables

    private void populateMovieCombo() {
        cmbMovies.removeAllItems();
        try{
            for(Movie m : dr.getMovieList()) {
                cmbMovies.addItem(m);
            }
        } catch (Exception e) {}
    }

    private void populateTheaterChainCombo() {
        cmbTheaterChain.removeAllItems();
        try{
            for (TheaterChain tc : theaterChains) {
                cmbTheaterChain.addItem(tc);
            }    
        } catch (Exception e) {}
        
    }

    private void populateTheaterTable() {
        DefaultTableModel model = (DefaultTableModel) tblTheaters.getModel();
        model.setRowCount(0);
        TheaterChain tc = (TheaterChain) cmbTheaterChain.getSelectedItem();

        for(Theater t : tc.getTheaterList()){
            if (selectedList.contains(t)) continue;
            Object row[] = new Object[2];

            row[0] = t;
            row[1] = t.getScreens().size();

            model.addRow(row);
        }
    }

    private void populateCartTable() {
        DefaultTableModel model = (DefaultTableModel) tblSelectedTheaters.getModel();
        model.setRowCount(0);
        
        for(Theater t : selectedList){
            Object row[] = new Object[2];

            row[0] = t;
            row[1] = priceList.get(t);

            model.addRow(row);
        }
    }
}
