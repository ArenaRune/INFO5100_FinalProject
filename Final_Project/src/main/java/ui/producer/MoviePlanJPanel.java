/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.producer;

import db4outil.DB4OUtil;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.EcoSystem;
import model.enterprise.Enterprise;
import model.enterprise.ProductionHouse;
import model.network.Network;
import model.role.CastRole;
import model.role.DirectorRole;
import model.role.ProducerRole;
import model.role.ScreenWriterRole;
import model.useraccount.UserAccount;
import model.workrequest.CastWorkRequest;
import model.workrequest.DirectorWorkRequest;
import model.workrequest.ProducerWorkRequest;
import model.workrequest.ScreenWriterWorkRequest;

/**
 *
 * @author navyaravuri
 */
public class MoviePlanJPanel extends javax.swing.JPanel {
    JPanel userProcessContainer;
    Network network;
    ArrayList<DirectorRole> directors;
    ArrayList<ScreenWriterRole> screenWriters;
    ArrayList<CastRole> cast;
    HashMap<CastRole, Double> selectedCast;
    UserAccount ua;
    EcoSystem system;
    /**
     * Creates new form ProducerWorkAreaJPanel
     */
    public MoviePlanJPanel(JPanel userProcessContainer, EcoSystem system, Network network, UserAccount ua) {
        initComponents();
        
        this.system = system;
        this.userProcessContainer = userProcessContainer;
        this.network = network;
        ProductionHouse prodHouse = (ProductionHouse) network.getEnterpriseDirectory().findEnterpriseByType(Enterprise.EnterpriseType.ProductionHouse);
        directors = prodHouse.getDirectorOrganization().getDirectorRoles();
        screenWriters = prodHouse.getScreenWriterOrganization().getScreenWriterRoles();
        cast = prodHouse.getCastOrganization().getCastRoles();
        selectedCast = new HashMap<CastRole, Double>();
        this.ua = ua;
        populateDirectorCombo();
        populateScreenWriterCombo();
        populateCastTable();
        populateSelectedCastTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmbDirectors = new javax.swing.JComboBox();
        lblDirector = new javax.swing.JLabel();
        lblMovie = new javax.swing.JLabel();
        cmbScreenWriters = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCast = new javax.swing.JTable();
        btnFinish = new javax.swing.JButton();
        lblCast = new javax.swing.JLabel();
        lblTitle = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblSelectedCast = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        lblMovieName = new javax.swing.JLabel();
        txtMovieName = new javax.swing.JTextField();
        txtCastSalary = new javax.swing.JTextField();
        txtDirectorSalary = new javax.swing.JTextField();
        txtScreenWriterSalary = new javax.swing.JTextField();
        lblCastSalary = new javax.swing.JLabel();
        lblDirectorSalary = new javax.swing.JLabel();
        lblScreenWriterSalary = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        lblDirector.setForeground(new java.awt.Color(0, 51, 51));
        lblDirector.setText("Director:");

        lblMovie.setForeground(new java.awt.Color(0, 51, 51));
        lblMovie.setText("ScreenWriter");

        tblCast.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCast);
        if (tblCast.getColumnModel().getColumnCount() > 0) {
            tblCast.getColumnModel().getColumn(0).setResizable(false);
        }

        btnFinish.setBackground(new java.awt.Color(136, 197, 197));
        btnFinish.setText("Finish");
        btnFinish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinishActionPerformed(evt);
            }
        });

        lblCast.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lblCast.setForeground(new java.awt.Color(0, 51, 51));
        lblCast.setText("Cast Members:");

        lblTitle.setBackground(new java.awt.Color(255, 255, 255));
        lblTitle.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(0, 51, 51));
        lblTitle.setText("Plan a Movie");

        tblSelectedCast.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Salary"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblSelectedCast);
        if (tblSelectedCast.getColumnModel().getColumnCount() > 0) {
            tblSelectedCast.getColumnModel().getColumn(0).setResizable(false);
            tblSelectedCast.getColumnModel().getColumn(1).setResizable(false);
        }

        btnAdd.setBackground(new java.awt.Color(136, 197, 197));
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnRemove.setBackground(new java.awt.Color(136, 197, 197));
        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnBack.setBackground(new java.awt.Color(204, 204, 255));
        btnBack.setText("<<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblMovieName.setForeground(new java.awt.Color(0, 51, 51));
        lblMovieName.setText("Movie Name:");

        lblCastSalary.setForeground(new java.awt.Color(0, 51, 51));
        lblCastSalary.setText("Salary:");

        lblDirectorSalary.setForeground(new java.awt.Color(0, 51, 51));
        lblDirectorSalary.setText("Salary:");

        lblScreenWriterSalary.setForeground(new java.awt.Color(0, 51, 51));
        lblScreenWriterSalary.setText("Salary:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addGap(185, 185, 185)
                        .addComponent(lblTitle)
                        .addGap(368, 368, 368))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblCast)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(lblCastSalary, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(txtCastSalary, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(btnAdd))
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(35, 35, 35)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnRemove))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(56, 56, 56)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblDirector, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(lblMovieName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(14, 14, 14)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(cmbScreenWriters, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(cmbDirectors, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(lblScreenWriterSalary)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addComponent(txtScreenWriterSalary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(lblDirectorSalary, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addComponent(txtDirectorSalary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                            .addGroup(layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(txtMovieName))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(207, 207, 207)
                                        .addComponent(btnFinish, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(109, 109, 109))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cmbDirectors, cmbScreenWriters, txtCastSalary, txtDirectorSalary, txtMovieName, txtScreenWriterSalary});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblDirector, lblMovie, lblMovieName});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblDirectorSalary, lblScreenWriterSalary});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTitle)
                    .addComponent(btnBack))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblMovieName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblDirector, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblMovie))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(txtMovieName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblDirectorSalary)
                                .addComponent(txtDirectorSalary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cmbDirectors, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbScreenWriters, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblScreenWriterSalary)
                            .addComponent(txtScreenWriterSalary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(lblCast)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(txtCastSalary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCastSalary)
                    .addComponent(btnRemove))
                .addGap(18, 18, 18)
                .addComponent(btnFinish)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lblDirector, lblDirectorSalary, lblMovie, lblMovieName, lblScreenWriterSalary, txtDirectorSalary, txtScreenWriterSalary});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {cmbDirectors, cmbScreenWriters});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lblCastSalary, txtCastSalary});

    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
        
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblCast.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a cast member first.");
            return;
        }
        CastRole cr = (CastRole) tblCast.getValueAt(selectedRowIndex, 0);
        if (selectedCast.containsKey(cr)) {
            JOptionPane.showMessageDialog(this, "Cast member has already been selected.");
            return;
        }
        
        Double salary;
        try {
            salary = Double.parseDouble(txtCastSalary.getText());
            if (salary < 0) {
                JOptionPane.showMessageDialog(this, "Enter a valid Salary.", "Warning", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Enter a valid Salary.", "Warning", JOptionPane.ERROR_MESSAGE);
            return;
        }
        selectedCast.put(cr, salary);
        txtCastSalary.setText("");
        populateSelectedCastTable();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblCast.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a cast member first.");
            return;
        }
        CastRole cr = (CastRole) tblCast.getValueAt(selectedRowIndex, 0);
        selectedCast.remove(cr);
        populateSelectedCastTable();
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnFinishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinishActionPerformed
        // TODO add your handling code here:
        if (txtMovieName.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a Name for the movie.", "Warning", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String movieName = txtMovieName.getText();
        
        DirectorRole director = (DirectorRole) cmbDirectors.getSelectedItem();
        Double directorSalary;
        try {
            directorSalary = Double.parseDouble(txtDirectorSalary.getText());
            if (directorSalary < 0) {
                JOptionPane.showMessageDialog(this, "Enter a valid Salary.", "Warning", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Enter a valid Salary.", "Warning", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        ScreenWriterRole screenWriter = (ScreenWriterRole) cmbScreenWriters.getSelectedItem();
        Double screenWriterSalary;
        try {
            screenWriterSalary = Double.parseDouble(txtScreenWriterSalary.getText());
            if (screenWriterSalary < 0) {
                JOptionPane.showMessageDialog(this, "Enter a valid Salary.", "Warning", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Enter a valid Salary.", "Warning", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (selectedCast.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select atleast one cast member for the movie.", "Warning", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        ProducerWorkRequest pwr = new ProducerWorkRequest();
        pwr.setMovieName(movieName);
        
        DirectorWorkRequest dwr = new DirectorWorkRequest();
        dwr.setSender((ProducerRole) ua.getRole());
        dwr.setMovieName(movieName);
        dwr.setReceiver(director);
        dwr.setSalary(directorSalary);
        dwr.setStatus("pending");
        dwr.setPwr(pwr);
        director.getWorkQueue().getWorkQueue().add(dwr);
        pwr.setDirectorWorkRequest(dwr);
        
        ScreenWriterWorkRequest swwr = new ScreenWriterWorkRequest();
        swwr.setSender((ProducerRole) ua.getRole());
        swwr.setMovieName(movieName);
        swwr.setReceiver(screenWriter);
        swwr.setSalary(screenWriterSalary);
        swwr.setStatus("pending");
        screenWriter.getWorkQueue().getWorkQueue().add(swwr);
        pwr.setScreenWriterWorkRequest(swwr);
        
        for (CastRole cr : selectedCast.keySet()) {
            CastWorkRequest cwr = new CastWorkRequest();
            cwr.setSender((ProducerRole) ua.getRole());
            cwr.setMovieName(movieName);
            cwr.setReceiver(cr);
            cwr.setSalary(selectedCast.get(cr).doubleValue());
            cwr.setStatus("pending");
            cr.getWorkQueue().getWorkQueue().add(cwr);
            pwr.getCastWorkRequests().add(cwr);
        }
        
        ProducerRole producer = (ProducerRole) ua.getRole();
        producer.getMovieQueue().add(pwr);
        pwr.setMovieQueue();
        JOptionPane.showMessageDialog(this, "Movie request successfully made.", "Success", JOptionPane.INFORMATION_MESSAGE);
        
        DB4OUtil.getInstance().storeSystem(system);
        
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        if (componentArray.length > 0 ) {
            Component component = componentArray[componentArray.length - 1];
            ProducerWorkAreaJPanel producerWorkAreaJPanel = (ProducerWorkAreaJPanel) component;
            producerWorkAreaJPanel.populateTable();
        }
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnFinishActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnFinish;
    private javax.swing.JButton btnRemove;
    private javax.swing.JComboBox cmbDirectors;
    private javax.swing.JComboBox cmbScreenWriters;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblCast;
    private javax.swing.JLabel lblCastSalary;
    private javax.swing.JLabel lblDirector;
    private javax.swing.JLabel lblDirectorSalary;
    private javax.swing.JLabel lblMovie;
    private javax.swing.JLabel lblMovieName;
    private javax.swing.JLabel lblScreenWriterSalary;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblCast;
    private javax.swing.JTable tblSelectedCast;
    private javax.swing.JTextField txtCastSalary;
    private javax.swing.JTextField txtDirectorSalary;
    private javax.swing.JTextField txtMovieName;
    private javax.swing.JTextField txtScreenWriterSalary;
    // End of variables declaration//GEN-END:variables

    private void populateDirectorCombo() {
        cmbDirectors.removeAllItems();
        
        for (DirectorRole dr : directors) {
            cmbDirectors.addItem(dr);
        }
    }

    private void populateScreenWriterCombo() {
        cmbScreenWriters.removeAllItems();
        
        for (ScreenWriterRole swr : screenWriters) {
            cmbScreenWriters.addItem(swr);
        }
    }

    private void populateCastTable() {
        DefaultTableModel model = (DefaultTableModel) tblCast.getModel();
        model.setRowCount(0);
        
        for (CastRole cr : cast) {
            Object row[] = new Object[1];
            row[0] = cr;
            model.addRow(row);
        }
    }

    private void populateSelectedCastTable() {
        DefaultTableModel model = (DefaultTableModel) tblSelectedCast.getModel();
        model.setRowCount(0);
        
        for (CastRole cr : selectedCast.keySet()) {
            Object row[] = new Object[2];
            row[0] = cr;
            row[1] = selectedCast.get(cr);
            model.addRow(row);
        }
    }  
}
