/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.producer;

import db4outil.DB4OUtil;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.EcoSystem;
import model.enterprise.DistributionCompany;
import model.enterprise.Enterprise;
import model.movie.Movie;
import model.network.Network;
import model.role.DistributorRole;
import model.role.ProducerRole;
import model.workrequest.BidRequest;
import model.workrequest.MovieDistributionWorkRequest;

/**
 *
 * @author navyaravuri
 */
public class DistributeMovieJPanel extends javax.swing.JPanel {
    JPanel userProcessContainer;
    Network network;
    ProducerRole pr;
    EcoSystem system;
    /**
     * Creates new form DistributeMovieJPanel
     */
    public DistributeMovieJPanel(JPanel userProcessContainer,EcoSystem system, Network network, ProducerRole pr) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.network = network;
        this.pr = pr;
        this.system = system;
        
        populateMovieCombo();
        populateDistributeCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        cmbMoviesForBid = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDistributors = new javax.swing.JTable();
        btnAccept = new javax.swing.JButton();
        cmbMovies = new javax.swing.JComboBox();
        txtPrice = new javax.swing.JTextField();
        btnBid = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        btnBack.setBackground(new java.awt.Color(204, 204, 255));
        btnBack.setText("<<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblTitle.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(0, 51, 51));
        lblTitle.setText("Movie Details");

        cmbMoviesForBid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMoviesForBidActionPerformed(evt);
            }
        });

        tblDistributors.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Producer", "Amount Bid"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblDistributors);
        if (tblDistributors.getColumnModel().getColumnCount() > 0) {
            tblDistributors.getColumnModel().getColumn(0).setResizable(false);
            tblDistributors.getColumnModel().getColumn(1).setResizable(false);
        }

        btnAccept.setBackground(new java.awt.Color(204, 255, 204));
        btnAccept.setText("Accept");
        btnAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcceptActionPerformed(evt);
            }
        });

        btnBid.setBackground(new java.awt.Color(136, 197, 197));
        btnBid.setText("Put for Bid");
        btnBid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBidActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(598, 598, 598)
                            .addComponent(btnAccept))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(35, 35, 35)
                            .addComponent(btnBack)
                            .addGap(185, 185, 185)
                            .addComponent(lblTitle))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(297, 297, 297)
                            .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnBid)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(cmbMoviesForBid, javax.swing.GroupLayout.Alignment.LEADING, 0, 135, Short.MAX_VALUE)
                            .addComponent(cmbMovies, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(130, 130, 130))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(lblTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(btnBack)))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbMovies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBid))
                .addGap(18, 18, 18)
                .addComponent(cmbMoviesForBid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnAccept)
                .addGap(172, 172, 172))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnBidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBidActionPerformed
        // TODO add your handling code here:
        Movie m = (Movie) cmbMovies.getSelectedItem();
        Double minimumBid;
        try {
            minimumBid = Double.parseDouble(txtPrice.getText());
            if (minimumBid < m.getBudget()) {
                JOptionPane.showMessageDialog(this, "Enter an amount greater than the budget to get recovery.", "Warning", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Enter a valid price for the movie.", "Warning", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        DistributionCompany distributionHouse = (DistributionCompany) network.getEnterpriseDirectory().findEnterpriseByType(Enterprise.EnterpriseType.DistributionHouse);
        ArrayList<DistributorRole> distributors = distributionHouse.getDistributorOperationsOrganization().getDistributorRoles();
        for (DistributorRole dr : distributors) {
            MovieDistributionWorkRequest mdwr = new MovieDistributionWorkRequest();
            mdwr.setSender(pr);
            mdwr.setReceiver(dr);
            mdwr.setMinimumBid(minimumBid);
            mdwr.setMovie(m);
            dr.getWorkQueue().getWorkQueue().add(mdwr);
        }
        pr.getMoviesNotDistributed().remove(m);
        pr.getMoviesForBid().add(m);
        populateMovieCombo();
        populateDistributeCombo();
        
        JOptionPane.showMessageDialog(this, "Movie has been put up for bid.");
        txtPrice.setText("");
        DB4OUtil.getInstance().storeSystem(system);
    }//GEN-LAST:event_btnBidActionPerformed

    private void cmbMoviesForBidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMoviesForBidActionPerformed
        // TODO add your handling code here:
        Movie m = (Movie) cmbMoviesForBid.getSelectedItem();
        ArrayList<BidRequest> bidQueue = pr.getBidQueue().get(m);
        
        try{
            populateTable(bidQueue);
        } catch (Exception e) {
            return;
        }
    }//GEN-LAST:event_cmbMoviesForBidActionPerformed

    private void btnAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcceptActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblDistributors.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a distributor first.");
            return;
        }
        Movie m = (Movie) cmbMoviesForBid.getSelectedItem();
        BidRequest br = (BidRequest) tblDistributors.getValueAt(selectedRowIndex, 0);
        DistributorRole dr = (DistributorRole) br.getSender();
        dr.getMovieList().add(m);
        dr.getCost().put(m, (Double) tblDistributors.getValueAt(selectedRowIndex, 1));
        pr.getMoviesForBid().remove(m);
        populateMovieCombo();
        populateDistributeCombo();
        
        JOptionPane.showMessageDialog(this, "Bid has been accepted.");
        
        DB4OUtil.getInstance().storeSystem(system);
    }//GEN-LAST:event_btnAcceptActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAccept;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnBid;
    private javax.swing.JComboBox cmbMovies;
    private javax.swing.JComboBox cmbMoviesForBid;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblDistributors;
    private javax.swing.JTextField txtPrice;
    // End of variables declaration//GEN-END:variables

    private void populateMovieCombo() {
        cmbMovies.removeAllItems();
        
        if (pr.getMoviesNotDistributed().isEmpty()) return;
        
        for (Movie m : pr.getMoviesNotDistributed()){
            cmbMovies.addItem(m);
        }
    }

    private void populateDistributeCombo() {
        cmbMoviesForBid.removeAllItems();
        
        if (pr.getMoviesForBid().isEmpty()) return;
        
        for (Movie m : pr.getMoviesForBid()) {
            cmbMoviesForBid.addItem(m);
        }
    }

    private void populateTable(ArrayList<BidRequest> bidQueue) {
        
        DefaultTableModel model = (DefaultTableModel) tblDistributors.getModel();
        model.setRowCount(0);
        
        for(BidRequest br : bidQueue){
            Object row[] = new Object[2];
            
            row[0] = br;
            row[1] = br.getBidAmount();
            
            model.addRow(row);
        }
    }
}
