/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.customer;

import db4outil.DB4OUtil;
import java.awt.CardLayout;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Date;
import java.util.Properties;
import javax.mail.Session;
import javax.mail.*;
import javax.mail.internet.*;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.EcoSystem;
import model.enterprise.Enterprise;
import model.enterprise.TheaterChain;
import model.movie.Movie;
import model.network.Network;
import model.role.CustomerRole;
import model.theater.Seat;
import model.theater.Show;
import model.theater.Theater;
import model.theater.Ticket;
import model.useraccount.UserAccount;

/**
 *
 * @author praneethreddy
 */
public class CustomerWorkAreaJPanel extends javax.swing.JPanel {
    EcoSystem system;
    JPanel userProcessContainer;
    UserAccount ua;
    ArrayList<TheaterChain> theaterChains;
    ArrayList<Seat> selectedSeats;
    CustomerRole cr;
    Movie selectedMovie;
    Theater selectedTheater;
    Show selectedShow;
    LocalDate selectedDate;
    String selectedShowtime;
    double totalPrice;
    /**
     * Creates new form CustomerWorkArea
     */
    public CustomerWorkAreaJPanel(JPanel userProcessContainer, EcoSystem system, UserAccount ua) {
        initComponents();
        
        this.system = system;
        this.userProcessContainer = userProcessContainer;
        this.ua = ua;
        selectedMovie = null;
        selectedTheater = null;
        selectedShow = null;
        selectedDate = null;
        selectedShowtime = null;
        totalPrice = 0;
        cr = (CustomerRole) ua.getRole();
        theaterChains = new ArrayList<TheaterChain>();
        for (Network n : system.getNetworkList()) {
           for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
               if (e.getEnterpriseType().equals(Enterprise.EnterpriseType.TheaterChain)) {
                   theaterChains.add((TheaterChain) e);
               }
           }
        }
        selectedSeats = new ArrayList<Seat>();
        populateTheaterChainCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        btnLogout = new javax.swing.JButton();
        cmbTheaterChains = new javax.swing.JComboBox();
        cmbTheaters = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMovies = new javax.swing.JTable();
        cmbDates = new javax.swing.JComboBox();
        cmbShowtimes = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblSeats = new javax.swing.JTable();
        txtTheaterChain = new javax.swing.JTextField();
        txtTheater = new javax.swing.JTextField();
        txtMovie = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblSelectedSeats = new javax.swing.JTable();
        txtDate = new javax.swing.JTextField();
        txtShowtime = new javax.swing.JTextField();
        btnCheckout = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnSelectMovie = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        txtPrice = new javax.swing.JTextField();
        lblPrice = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(800, 600));

        lblTitle.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(0, 51, 51));
        lblTitle.setText("Book Tickets");

        btnLogout.setBackground(new java.awt.Color(204, 204, 255));
        btnLogout.setText("Logout");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        cmbTheaterChains.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTheaterChainsActionPerformed(evt);
            }
        });

        cmbTheaters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTheatersActionPerformed(evt);
            }
        });

        tblMovies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Movie Name", "Ticket Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblMovies);
        if (tblMovies.getColumnModel().getColumnCount() > 0) {
            tblMovies.getColumnModel().getColumn(0).setResizable(false);
            tblMovies.getColumnModel().getColumn(1).setResizable(false);
        }

        cmbDates.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbDatesActionPerformed(evt);
            }
        });

        cmbShowtimes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbShowtimesActionPerformed(evt);
            }
        });

        tblSeats.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Seats"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblSeats);
        if (tblSeats.getColumnModel().getColumnCount() > 0) {
            tblSeats.getColumnModel().getColumn(0).setResizable(false);
        }

        tblSelectedSeats.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Seats"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblSelectedSeats);
        if (tblSelectedSeats.getColumnModel().getColumnCount() > 0) {
            tblSelectedSeats.getColumnModel().getColumn(0).setResizable(false);
        }

        btnCheckout.setBackground(new java.awt.Color(136, 197, 197));
        btnCheckout.setText("Checkout");
        btnCheckout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckoutActionPerformed(evt);
            }
        });

        btnRemove.setBackground(new java.awt.Color(136, 197, 197));
        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnSelectMovie.setBackground(new java.awt.Color(136, 197, 197));
        btnSelectMovie.setText("Select Movie");
        btnSelectMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectMovieActionPerformed(evt);
            }
        });

        btnAdd.setBackground(new java.awt.Color(136, 197, 197));
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        lblPrice.setText("Total Price");

        jButton1.setBackground(new java.awt.Color(153, 204, 255));
        jButton1.setText("My Tickets");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cmbTheaterChains, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(cmbTheaters, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnLogout)
                        .addGap(185, 185, 185)
                        .addComponent(lblTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(21, 21, 21)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(cmbDates, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(cmbShowtimes, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnAdd)))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lblPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(btnCheckout)))
                            .addComponent(btnSelectMovie))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtShowtime))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jButton1)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(txtTheaterChain, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(txtTheater)))
                            .addComponent(btnRemove))))
                .addGap(65, 65, 65))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cmbDates, cmbShowtimes});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtDate, txtShowtime, txtTheater, txtTheaterChain});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLogout)
                    .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbTheaterChains, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbTheaters, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbDates, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbShowtimes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTheaterChain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTheater, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtMovie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtShowtime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSelectMovie)
                    .addComponent(btnAdd)
                    .addComponent(btnRemove))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCheckout)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPrice))
                .addGap(78, 78, 78))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void cmbShowtimesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbShowtimesActionPerformed
        // TODO add your handling code here:
        refreshFields();
        
        DefaultTableModel model = (DefaultTableModel) tblSeats.getModel();
        model.setRowCount(0);
        
        if (selectedTheater == null || selectedMovie == null || selectedDate == null) return;
        
        selectedShowtime = (String) cmbShowtimes.getSelectedItem();
        
        for (Show show : selectedTheater.getMovieShows().get(selectedMovie)) {
            if (show.getShowType().equals(selectedShowtime)) {
                selectedShow = show;
                break;
            }
        }
        
        if (selectedShow == null) return;
        
        for (Seat s : selectedShow.getSeats()) {
            if (s.isBooked()) continue;
            if (selectedSeats.contains(s)) continue;
            Object row[] = new Object[1];
            row[0] = s;
            model.addRow(row);
        }
    }//GEN-LAST:event_cmbShowtimesActionPerformed

    private void cmbTheaterChainsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTheaterChainsActionPerformed
        // TODO add your handling code here:        
        cmbTheaters.removeAllItems();
        cmbShowtimes.removeAllItems();
        cmbDates.removeAllItems();
        selectedMovie = null;
        selectedTheater = null;
        selectedShow = null;
        selectedDate = null;
        selectedShowtime = null;
        DefaultTableModel model = (DefaultTableModel) tblMovies.getModel();
        model.setRowCount(0);
        refreshFields();
        
        TheaterChain tc = (TheaterChain) cmbTheaterChains.getSelectedItem();
        for (Theater t : tc.getTheaterList()) {
            cmbTheaters.addItem(t);
        }
    }//GEN-LAST:event_cmbTheaterChainsActionPerformed

    private void cmbTheatersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTheatersActionPerformed
        // TODO add your handling code here:
        refreshFields();
        cmbShowtimes.removeAllItems();
        cmbDates.removeAllItems();
        selectedMovie = null;
        selectedShow = null;
        selectedDate = null;
        selectedShowtime = null;
        DefaultTableModel model = (DefaultTableModel) tblMovies.getModel();
        model.setRowCount(0);
        
        selectedTheater = (Theater) cmbTheaters.getSelectedItem();
        if (selectedTheater == null) return;
        
        for (Movie movie : selectedTheater.getMovieList()) {
            if (selectedTheater.getMovieShows().get(movie) == null) continue;
            Object row[] = new Object[2];
            
            row[0] = movie;
            row[1] = selectedTheater.getPriceList().get(movie);
            
            model.addRow(row);
        }
    }//GEN-LAST:event_cmbTheatersActionPerformed

    private void btnSelectMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectMovieActionPerformed
        // TODO add your handling code here:
        refreshFields();
        DefaultTableModel model_1 = (DefaultTableModel) tblSeats.getModel();
        model_1.setRowCount(0);
        DefaultTableModel model_2 = (DefaultTableModel) tblSelectedSeats.getModel();
        model_2.setRowCount(0);
        selectedMovie = null;
        selectedShow = null;
        selectedDate = null;
        selectedShowtime = null;
        int selectedRowIndex = tblMovies.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a movie first.");
            return;
        }
        
        selectedMovie = (Movie) tblMovies.getValueAt(selectedRowIndex, 0);
        
        cmbDates.removeAllItems();
        cmbShowtimes.removeAllItems();
        
        ArrayList<LocalDate> dates = new ArrayList<LocalDate>();
        
        for (Show s : selectedTheater.getShows()) {
            LocalDate date = s.getDate();
            if (!dates.contains(date)) {  // Ensure uniqueness
                dates.add(date);
            }
        }
        for(LocalDate date : dates) {
            cmbDates.addItem(date);
        }
    }//GEN-LAST:event_btnSelectMovieActionPerformed

    private void cmbDatesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDatesActionPerformed
        // TODO add your handling code here:
        refreshFields();
        DefaultTableModel model_1 = (DefaultTableModel) tblSeats.getModel();
        model_1.setRowCount(0);
        cmbShowtimes.removeAllItems();
        selectedShowtime = null;
        selectedDate = (LocalDate) cmbDates.getSelectedItem();
        for (Show show : selectedTheater.getMovieShows().get(selectedMovie)) {
            show.getDate().equals(selectedDate);
            cmbShowtimes.addItem(show.getShowType());
        }
    }//GEN-LAST:event_cmbDatesActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblSeats.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a seat.");
            return;
        }
        
        Seat seat = (Seat) tblSeats.getValueAt(selectedRowIndex, 0);
        
        selectedSeats.add(seat);
        
        txtDate.setText(selectedDate.toString());
        txtMovie.setText(selectedMovie.getName());
        txtShowtime.setText(selectedShowtime);
        txtTheater.setText(selectedTheater.toString());
        txtTheaterChain.setText(cmbTheaterChains.getSelectedItem().toString());
        totalPrice = selectedTheater.getPriceList().get(selectedMovie) + totalPrice;
        txtPrice.setText(String.valueOf(totalPrice));
        
        refreshCartTable();
        refreshSeatTable();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblSelectedSeats.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a seat.");
            return;
        }
        
        Seat seat = (Seat) tblSeats.getValueAt(selectedRowIndex, 0);
        
        selectedSeats.remove(seat);
        refreshCartTable();
        refreshSeatTable();
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnCheckoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckoutActionPerformed
        // TODO add your handling code here:
        Ticket ticket = new Ticket(selectedShow);
        ArrayList<Seat> seats = ticket.getSeats();
        for (Seat seat : selectedSeats) {
            seats.add(seat);
            seat.setIsBooked(true);
            selectedMovie.setTicketCount(selectedMovie.getTicketCount() + 1);
            selectedTheater.getTicketsSold().put(selectedMovie, selectedTheater.getTicketsSold().get(selectedMovie) + 1);
        }
        ticket.setPrice(totalPrice);
        selectedMovie.setRevenue(selectedMovie.getRevenue()+totalPrice);
        selectedTheater.getRevenueList().put(selectedMovie, selectedTheater.getRevenueList().get(selectedMovie)+totalPrice);
        cr.getTickets().add(ticket);
        sendEmail();
        JOptionPane.showMessageDialog(this, "Ticket Booked", "Success", JOptionPane.INFORMATION_MESSAGE);
        
        cmbTheaters.removeAllItems();
        cmbShowtimes.removeAllItems();
        cmbDates.removeAllItems();
        selectedMovie = null;
        selectedTheater = null;
        selectedShow = null;
        selectedDate = null;
        selectedShowtime = null;
        refreshFields();
        DB4OUtil.getInstance().storeSystem(system);
    }//GEN-LAST:event_btnCheckoutActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        TicketHistoryJPanel ticketHistoryJPanel = new TicketHistoryJPanel(userProcessContainer, system, ua);
        userProcessContainer.add("ticketHistoryJPanel", ticketHistoryJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCheckout;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSelectMovie;
    private javax.swing.JComboBox cmbDates;
    private javax.swing.JComboBox cmbShowtimes;
    private javax.swing.JComboBox cmbTheaterChains;
    private javax.swing.JComboBox cmbTheaters;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblPrice;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblMovies;
    private javax.swing.JTable tblSeats;
    private javax.swing.JTable tblSelectedSeats;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtMovie;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtShowtime;
    private javax.swing.JTextField txtTheater;
    private javax.swing.JTextField txtTheaterChain;
    // End of variables declaration//GEN-END:variables

    private void populateTheaterChainCombo() {
        cmbTheaterChains.removeAllItems();
        
        for (TheaterChain tc : theaterChains) {
            cmbTheaterChains.addItem(tc);
        }
    }

    public void refreshFields() {
        txtDate.setText("");
        txtMovie.setText("");
        txtPrice.setText("");
        txtShowtime.setText("");
        txtTheater.setText("");
        txtTheaterChain.setText("");
        selectedSeats.clear();
        totalPrice = 0;
        refreshCartTable();
    }

    public void refreshSeatTable() {
        DefaultTableModel model = (DefaultTableModel) tblSeats.getModel();
        model.setRowCount(0);
        
        for (Seat s : selectedShow.getSeats()) {
            if (selectedSeats.contains(s)) continue;
            Object row[] = new Object[1];
            row[0] = s;
            model.addRow(row);
        }
    }
    
    private void refreshCartTable() {
        DefaultTableModel model = (DefaultTableModel) tblSelectedSeats.getModel();
        model.setRowCount(0);
        
        for (Seat seat : selectedSeats) {
            Object row[] = new Object[1];
            row[0] = seat;
            model.addRow(row);
        }
    }

    private void sendEmail() {
        String host = "smtp.gmail.com";
        final String username = "aed5100project@gmail.com"; 
        final String password = "lvlpgxtfzpptiyka";   
        
        String to = ua.getEmail();  
        
        Properties properties = new Properties();
        properties.put("mail.smtp.auth", "true");
        properties.put("mail.smtp.starttls.enable", "true");
        properties.put("mail.smtp.host", host);
        properties.put("mail.smtp.port", "587");  
        
        Session session = Session.getInstance(properties, new Authenticator() {
            @Override
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(username, password);
            }
        });

        try {
            Message message = new MimeMessage(session);
            message.setFrom(new InternetAddress(username)); 
            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to)); 
            message.setSubject("Booking Confirmation"); 
            message.setText("Hello, your Tickets have been booked for " + selectedMovie.getName() + " on " + 
                    selectedDate + "."); 

            Transport.send(message);
            System.out.println("Email sent successfully!");
        } catch (MessagingException e) {
            e.printStackTrace(); 
        }
    }
}
