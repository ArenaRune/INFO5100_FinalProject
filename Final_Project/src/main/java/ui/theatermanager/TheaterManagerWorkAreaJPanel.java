/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.theatermanager;

import db4outil.DB4OUtil;
import java.awt.CardLayout;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.EcoSystem;
import model.movie.Movie;
import model.network.Network;
import model.role.TheaterManagerRole;
import model.theater.Screen;
import model.theater.Show;
import model.theater.Theater;
import model.useraccount.UserAccount;

/**
 *
 * @author navyaravuri
 */
public class TheaterManagerWorkAreaJPanel extends javax.swing.JPanel {
    JPanel userProcessContainer;
    UserAccount ua;
    EcoSystem system;
    Network network;
    TheaterManagerRole tmr;
    Theater t;
    LocalDate today;
    ArrayList<Show> shows;
    /**
     * Creates new form TheaterManagerWorkAreaJPanel
     */
    public TheaterManagerWorkAreaJPanel(JPanel userProcessContainer, EcoSystem system, Network network, UserAccount ua) {
        initComponents();
        
        this.network = network;
        this.system = system;
        this.userProcessContainer = userProcessContainer;
        this.ua = ua;
        tmr = (TheaterManagerRole) ua.getRole();
        t = tmr.getTheater();
        today = LocalDate.now();
        shows = new ArrayList<Show>();
        populateMovieCombo();
        populateScreenTable();
        populateDateCombo();
        populateCartTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroupShows = new javax.swing.ButtonGroup();
        lblTitle = new javax.swing.JLabel();
        btnLogout = new javax.swing.JButton();
        cmbMovies = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblScreens = new javax.swing.JTable();
        checkBoxMorning = new javax.swing.JCheckBox();
        checkBoxAfternoon = new javax.swing.JCheckBox();
        checkBoxEvening = new javax.swing.JCheckBox();
        checkBoxNight = new javax.swing.JCheckBox();
        cmbDates = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCart = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnFinalize = new javax.swing.JButton();
        btnAnalytics = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        lblTitle.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(0, 51, 51));
        lblTitle.setText("Theater Manager Work Area");

        btnLogout.setBackground(new java.awt.Color(204, 204, 255));
        btnLogout.setText("Logout");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        cmbMovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbMoviesActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Select a Movie");

        tblScreens.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Screen Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblScreens);
        if (tblScreens.getColumnModel().getColumnCount() > 0) {
            tblScreens.getColumnModel().getColumn(0).setResizable(false);
        }

        btnGroupShows.add(checkBoxMorning);
        checkBoxMorning.setText("Morning (11:00 - 1:00)");

        btnGroupShows.add(checkBoxAfternoon);
        checkBoxAfternoon.setText("Afternoon (1:30 - 4:30)");

        btnGroupShows.add(checkBoxEvening);
        checkBoxEvening.setText("Evening (5:00 - 8:00)");

        btnGroupShows.add(checkBoxNight);
        checkBoxNight.setText("Night (9:00 - 12:00)");

        tblCart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Movie Name", "Screen", "Date", "Showtime"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblCart);
        if (tblCart.getColumnModel().getColumnCount() > 0) {
            tblCart.getColumnModel().getColumn(0).setResizable(false);
            tblCart.getColumnModel().getColumn(1).setResizable(false);
            tblCart.getColumnModel().getColumn(2).setResizable(false);
            tblCart.getColumnModel().getColumn(3).setResizable(false);
        }

        btnAdd.setBackground(new java.awt.Color(136, 197, 197));
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnRemove.setBackground(new java.awt.Color(136, 197, 197));
        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnFinalize.setBackground(new java.awt.Color(136, 197, 197));
        btnFinalize.setText("Finalize");
        btnFinalize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinalizeActionPerformed(evt);
            }
        });

        btnAnalytics.setBackground(new java.awt.Color(153, 204, 255));
        btnAnalytics.setText("Movie Analytics");
        btnAnalytics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalyticsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(checkBoxNight, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(checkBoxEvening, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(checkBoxMorning, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(checkBoxAfternoon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cmbDates, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(cmbMovies, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(btnAdd)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnRemove)
                        .addGap(279, 279, 279)
                        .addComponent(btnFinalize))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 432, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(btnLogout)
                .addGap(169, 169, 169)
                .addComponent(lblTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAnalytics)
                .addGap(21, 21, 21))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {checkBoxAfternoon, checkBoxEvening, checkBoxMorning, checkBoxNight});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLogout)
                    .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAnalytics))
                .addGap(87, 87, 87)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cmbMovies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cmbDates, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56)
                        .addComponent(checkBoxMorning)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkBoxAfternoon)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkBoxEvening)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkBoxNight))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAdd)
                    .addComponent(btnFinalize)
                    .addComponent(btnRemove))
                .addGap(87, 87, 87))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        ArrayList<String> selectedShows = new ArrayList<String>();
        ArrayList<Show> cartShows = new ArrayList<Show>();
        
        int selectedRowIndex = tblScreens.getSelectedRow();
        if (selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a Screen.");
            return;
        }
        ArrayList<Show> checkShows = new ArrayList<Show>();
        checkShows.addAll(shows);
        checkShows.addAll(t.getShows());
        Screen screen = (Screen) tblScreens.getValueAt(selectedRowIndex, 0);
        Movie movie = (Movie) cmbMovies.getSelectedItem();
        LocalDate date = (LocalDate) cmbDates.getSelectedItem();
        
        if (!checkBoxMorning.isSelected() && !checkBoxAfternoon.isSelected() &&
                !checkBoxEvening.isSelected() && !checkBoxNight.isSelected()) {
                JOptionPane.showMessageDialog(this, "Please select at least one show timing.", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
        }
        if (checkBoxMorning.isSelected()) {
            Show show = new Show(movie, screen, date, "Morning", t);
            for (Show s : checkShows) {
                if (s.getDate().isEqual(date) && s.getShowType().contentEquals(show.getShowType()) && s.getScreen().equals(screen)) {
                    JOptionPane.showMessageDialog(this, "There is already a show at : " + screen 
                        + " : " + date + " : " + show.getShowType(), "Warning", JOptionPane.WARNING_MESSAGE);
                    return;
                }          
            }
            cartShows.add(show);
        }
        if (checkBoxAfternoon.isSelected()) {
            Show show = new Show(movie, screen, date, "Afternoon", t);
            for (Show s : checkShows) {
                if (s.getDate().isEqual(date) && s.getShowType().contentEquals(show.getShowType()) && s.getScreen().equals(screen)) {
                    JOptionPane.showMessageDialog(this, "There is already a show at : " + screen 
                        + " : " + date + " : " + show.getShowType(), "Warning", JOptionPane.WARNING_MESSAGE);
                    return;
                }
            }
            cartShows.add(show);
        }
        if (checkBoxEvening.isSelected()) {
            Show show = new Show(movie, screen, date, "Evening", t);
            for (Show s : checkShows) {
                if (s.getDate().isEqual(date) && s.getShowType().contentEquals(show.getShowType()) && s.getScreen().equals(screen)) {
                    JOptionPane.showMessageDialog(this, "There is already a show at : " + screen 
                        + " : " + date + " : " + show.getShowType(), "Warning", JOptionPane.WARNING_MESSAGE);
                    return;
                }
            }
            cartShows.add(show);
        }
        if (checkBoxNight.isSelected()) {
            Show show = new Show(movie, screen, date, "Night", t);
            for (Show s : checkShows) {
                if (s.getDate().isEqual(date) && s.getShowType().contentEquals(show.getShowType()) && s.getScreen().equals(screen)) {
                    JOptionPane.showMessageDialog(this, "There is already a show at : " + screen 
                        + " : " + date + " : " + show.getShowType(), "Warning", JOptionPane.WARNING_MESSAGE);
                    return;
                }
            }
            cartShows.add(show);
        }
        for (Show s : cartShows) {
            shows.add(s);
        }
        
        populateCartTable();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblCart.getSelectedRow();
        if (selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select the show you want to delete.");
            return;
        }
        Show show = (Show) tblCart.getValueAt(selectedRowIndex, 0);
        
        shows.remove(show);
        
        populateCartTable();
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnFinalizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinalizeActionPerformed
        // TODO add your handling code here:
        for (Show s : shows) {
            t.getShows().add(s);
            ArrayList<Show> showForMovie = t.getMovieShows().get(s.getMovie());
            if (showForMovie == null) {
                showForMovie = new ArrayList<Show>();
                t.getMovieShows().put(s.getMovie(), showForMovie);
            }

            showForMovie.add(s);
        }
        shows.clear();
        
        populateMovieCombo();
        populateScreenTable();
        populateDateCombo();
        populateCartTable();
        
        DB4OUtil.getInstance().storeSystem(system);
    }//GEN-LAST:event_btnFinalizeActionPerformed

    private void cmbMoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbMoviesActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tblScreens.getModel();
        model.setRowCount(0);
        
        for (Screen s : t.getScreens()) {
            Object row[] = new Object[1];
            
            row[0] = s;
            
            model.addRow(row);
        }
    }//GEN-LAST:event_cmbMoviesActionPerformed

    private void btnAnalyticsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalyticsActionPerformed
        // TODO add your handling code here:
        MovieAnalyticsJPanel movieAnalyticsJPanel = new MovieAnalyticsJPanel(userProcessContainer, system, ua);
        userProcessContainer.add("movieAnalyticsJPanel", movieAnalyticsJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnAnalyticsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnAnalytics;
    private javax.swing.JButton btnFinalize;
    private javax.swing.ButtonGroup btnGroupShows;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnRemove;
    private javax.swing.JCheckBox checkBoxAfternoon;
    private javax.swing.JCheckBox checkBoxEvening;
    private javax.swing.JCheckBox checkBoxMorning;
    private javax.swing.JCheckBox checkBoxNight;
    private javax.swing.JComboBox cmbDates;
    private javax.swing.JComboBox cmbMovies;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblCart;
    private javax.swing.JTable tblScreens;
    // End of variables declaration//GEN-END:variables

    private void populateMovieCombo() {
        cmbMovies.removeAllItems();
        
        for(Movie m: t.getMovieList()) {
            cmbMovies.addItem(m);
        }
    }

    private void populateScreenTable() {
        DefaultTableModel model = (DefaultTableModel) tblScreens.getModel();
        model.setRowCount(0);
        
        for (Screen s : t.getScreens()){
            
            Object row[] = new Object[1];
             
            row[0] = s;
             
            model.addRow(row);
        }
        return;
    }

    private void populateDateCombo() {
        cmbDates.removeAllItems();
        
        for (int i = 1; i < 6; i++) {
            LocalDate nextDay = today.plusDays(i);
            cmbDates.addItem((LocalDate) nextDay);
        }
        
        return;
    }

    private void populateCartTable() {
        DefaultTableModel model = (DefaultTableModel) tblCart.getModel();
        model.setRowCount(0);
        
        for (Show s : shows) {
            Object row[] = new Object[4];
            
            row[0] = s;
            row[1] = s.getScreen();
            row[2] = s.getDate();
            row[3] = s.getShowType();
            
            model.addRow(row);
        }
        
        return;
    }
}
